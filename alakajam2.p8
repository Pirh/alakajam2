pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- state management

states = nil
nowstate = nil

function initstates()
  states = {
    title = {
      init = titleinit,
      update = titleupdate,
      draw = titledraw,
    },
    game = {
      init = gameinit,
      update = gameupdate,
      draw = gamedraw,
    },
    finale = {
      init = finaleinit,
      update = finaleupdate,
      draw = finaledraw,
    }
  }
end

function _init()
  initstates()
  changestate(states.game)
end

function _update60()
  nowstate.update()
end

function _draw()
  nowstate.draw()
end

function changestate(state)
  nowstate = state
  nowstate.init()
end
-->8
-- utilities and constants
dt = 1.0 / 60.0

rectps = {
    {0,0},
    {7,0},
    {0,7},
    {7,7}
}

function tile(pix)
  return flr(pix / 8)
end

function pix(tile)
  return tile * 8
end

function hits_map(px, py)
  local tx = tile(px)
  local ty = tile(py)
  local sp = mget(tx, ty)
  return fget(sp, 0)
end

function rect_hits_map(px, py)
  local result = false
  for off in all(rectps) do
    local rx = px + off[1]
    local ry = py + off[2]
    result = result or hits_map(rx, ry)
  end
  return result
end

function lerp(a, b, t)
  return a * (1-t) + b*t
end

function binary_sweep(x0, y0, x1, y1)
  if not rect_hits_map(x1, y1) then
    return 1
  end
  
  local at = 0.5
  local step = 0.25
  for i=1,3 do
    local x = lerp(x0, x1, at)
    local y = lerp(y0, y1, at)
    if rect_hits_map(x, y) then
      at -= step
    else
      at += step
    end
    step *= 0.5
  end
  local x = lerp(x0, x1, at)
  local y = lerp(y0, y1, at)
  if rect_hits_map(x, y) then
    return 0
  else
    return at
  end
end
-->8
-- title state

function titleinit()
  
end

function titleupdate()
  if btnp(4) then
    changestate(states.game)
  end
end

function titledraw()
  cls(0)
  print("fragments")
end
-->8
-- game state

function gameinit()
  player = nil
  for mx=0,15 do
    for my=0,15 do
      local sp = mget(mx, my)
      if sp == 1 then
        player = {
          x=pix(mx), y=pix(my),
          vx=0, vy=0,
          colliding = false,
        }
      end
    end
  end
end

function gameupdate()
  local vx = 0
  if btn(0) then vx -= 24 end
  if btn(1) then vx += 24 end
  player.vx = vx
  
  player.vy += 100 * dt
  if btnp(4) and player.grounded then
    player.grounded = false
    player.vy = -70
  end

  -- vertical movement
  local px = player.x
  local py = player.y
  local ex = px + player.vx * dt
  local ey = py + player.vy * dt
  
  if not rect_hits_map(ex, ey) then
    player.x = ex
    player.y = ey
  else
    -- sweep straight down
    local collat = binary_sweep(px, py, px, ey)
    player.y = lerp(py, ey, collat)
    if collat < 1 then
      player.vy = 0
      player.grounded = true
    end
    
    -- sweep horizontally
    local collat = binary_sweep(px, player.y, ex, player.y)
    player.x = lerp(px, ex, collat)
    if collat < 1 then player.vx = 0 end    
  end
  
  if player.vy != 0 then player.grounded = false end
end

function gamedraw()
  cls(1)
  map(0, 0, 0, 0, 16, 16, 0b00000001)
  
  spr(1, player.x, player.y)
end
-->8
-- finale state

function finaleinit()
end

function finaleupdate()
  if btnp(4) then
    changestate(states.title)
  end
end

function finaledraw()
  cls(2)
end
__gfx__
00000000000070006666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077706cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000070706cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000777776cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000007777006cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700077770706cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000770070006cccccc600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077006666666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0080010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000100000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000020202020200020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000202020200020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000202020200020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000202020200020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
