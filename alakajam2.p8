pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- state management

states = nil
nowstate = nil

function initstates()
  states = {
    title = {
      init = titleinit,
      update = titleupdate,
      draw = titledraw,
    },
    game = {
      init = gameinit,
      update = gameupdate,
      draw = gamedraw,
    },
    finale = {
      init = finaleinit,
      update = finaleupdate,
      draw = finaledraw,
    }
  }
end

function _init()
  initstates()
  changestate(states.game)
end

function _update60()
  nowstate.update()
end

function _draw()
  nowstate.draw()
end

function changestate(state)
  nowstate = state
  nowstate.init()
end
-->8
-- utilities and constants
dt = 1.0 / 60.0

maxspeed = 50
jumpheight = 20
jumpdistance = 32
airtime = jumpdistance / maxspeed
startingdistance = 6
stoppingdistance = 1
accel = (maxspeed * maxspeed) / (2.0 * startingdistance)
decel = (maxspeed * maxspeed) / (2.0 * stoppingdistance)
airfriction = 0.1
jumpspeed = (2.0 * jumpheight) / (airtime / 2.0)
gravity = 2.0 * jumpheight / (airtime * airtime * 0.25)
jumpgravscale = 5.0
fadespeed = 1.5
fadecurve = 4
inbuftime = 0.25

rectps = {
    {1,0},
    {6,0},
    {1,7},
    {6,7}
}

function tile(pix)
  return flr(pix / 8)
end

function pix(tile)
  return tile * 8
end

function hits_map(px, py, ox, oy)
  local tx = tile(px)
  local ty = tile(py)
  local sp = mget(tx+ox, ty+oy)
  return fget(sp, 0)
end

function rect_hits_map(px, py, ox, oy)
  local result = false
  for off in all(rectps) do
    local rx = px + off[1]
    local ry = py + off[2]
    result = result or hits_map(rx, ry, ox, oy)
  end
  return result
end

function rect_hits_rect(ax0, ay0, bx0, by0)
  local ax1 = ax0 + 7
  local ay1 = ay0 + 7
  local bx1 = bx0 + 7
  local by1 = by0 + 7
  local hitx = (ax0 <= bx0 and bx0 <= ax1) or (bx0 <= ax0 and ax0 <= bx1)
  local hity = (ay0 <= by0 and by0 <= ay1) or (by0 <= ay0 and ay0 <= by1)
  return hitx and hity
end

function lerp(a, b, t)
  return a * (1-t) + b*t
end

function clamp(n, lo, hi)
  return min(max(lo, n), hi)
end

function binary_sweep(x0, y0, x1, y1, ox, oy)
  if not rect_hits_map(x1, y1, ox, oy) then
    return 1
  end
  
  local at = 0.5
  local step = 0.25
  for i=1,3 do
    local x = lerp(x0, x1, at)
    local y = lerp(y0, y1, at)
    if rect_hits_map(x, y, ox, oy) then
      at -= step
    else
      at += step
    end
    step *= 0.5
  end
  local x = lerp(x0, x1, at)
  local y = lerp(y0, y1, at)
  if rect_hits_map(x, y, ox, oy) then
    return 0
  else
    return at
  end
end


levels = {
  {ox=0, oy=0},
  {ox=1, oy=0, darkreset=0},
  {ox=2, oy=0},
  {ox=3, oy=0},
  {ox=4, oy=0, darkreset=2},
  {ox=5, oy=0},
  {ox=6, oy=0},
  {ox=7, oy=0, darkreset=5},
}
-->8
-- title state

function titleinit()
  
end

function titleupdate()
  if btnp(4) then
    changestate(states.game)
  end
end

function titledraw()
  cls(0)
  print("fragments")
end
-->8
-- game state

level = 0
fadecol = 0

function gameinit()
  player = nil
  things = {}
  fade = 1
  fadein = true
  nextlevel = nil
  local lv = levels[level+1]
  local ox = lv.ox * 16
  local oy = lv.oy * 16
  for mx=0,15 do
    for my=0,15 do
      local sp = mget(mx+ox, my+oy)
      if sp == 1 then
        player = {
          sp=sp,
          x=pix(mx), y=pix(my),
          vx=0, vy=0,
          grounded = false,
          flipped = false,
          jumpbuffer = 0,
          groundbuffer = 0,
        }
        add(things, player)
      elseif sp == 17 then
        butterfly = {
          sp=sp,
          x=pix(mx), y=pix(my),
          flipped = false,
        }
        add(things, butterfly)
      end
    end
  end
end

function gameupdate()
  local lv = levels[level+1]
  local ox = lv.ox * 16
  local oy = lv.oy * 16
  
  fade = max(0, fade - dt * fadespeed)
  if player.groundbuffer > 0 then player.groundbuffer -= dt end
  if player.jumpbuffer > 0 then player.jumpbuffer -= dt end
  
  local facing = 0
  if btn(0) then facing -= 1 end
  if btn(1) then facing += 1 end
  player.vx += facing * accel
  player.vx = clamp(player.vx, -maxspeed, maxspeed)
  
  if facing == 0 then
    local friction = decel * dt
    if not player.grounded then
      friction *= airfriction
    end
    if abs(player.vx) < friction then
      player.vx = 0
    else
      player.vx -= sgn(player.vx) * friction
    end
  end
  
  local grav = gravity
  if player.vy < 0 and not btn(4) then
    grav *= jumpgravscale
  end
  
  player.vy += grav * dt
  if btnp(4) then player.jumpbuffer = inbuftime end
  if player.jumpbuffer > 0 and (player.grounded or player.groundbuffer > 0) then
    player.grounded = false
    player.vy = -jumpspeed
    player.jumpbuffer = 0
    player.groundbuffer = 0
  end

  -- vertical movement
  local px = player.x
  local py = player.y
  local ex = px + player.vx * dt
  local ey = py + player.vy * dt
  
  if not rect_hits_map(ex, ey, ox, oy) then
    player.x = ex
    player.y = ey
  else
    -- sweep straight down
    local collat = binary_sweep(px, py, px, ey, ox, oy)
    player.y = lerp(py, ey, collat)
    if collat < 1 then
      player.vy = 0
      player.grounded = true
      player.groundbuffer = inbuftime
    end
    
    -- sweep horizontally
    local collat = binary_sweep(px, player.y, ex, player.y, ox, oy)
    player.x = lerp(px, ex, collat)
    if collat < 1 then player.vx = 0 end    
  end
  
  if player.vy != 0 then player.grounded = false end
  
  if player.x < 0 or player.x > pix(15) then
    player.vx = 0
  end
  player.x = clamp(player.x, 0, pix(15))
  
  if player.y > pix(24) then
    if lv.darkreset then
      nextlevel = lv.darkreset
    else
      nextlevel = level
    end
  end
  
  if player.vx < 0 then player.flipped = true end
  if player.vx > 0 then player.flipped = false end
  
  for other in all(things) do
    if player != other then
      local collided = rect_hits_rect(player.x, player.y, other.x, other.y)
      if collided then
        nextlevel = level + 1
      end
    end
  end

  if nextlevel then
    local darkwipe = lv.darkreset or levels[nextlevel+1].darkreset
    fadecol = darkwipe and 8 or 0
    
    if fadein then
      fadein = false
      fade = 1
    elseif fade == 0 then
      level = nextlevel
      if not levels[level+1] then
        changestate(states.finale)
      else
        changestate(states.game)
      end
    end
  end
end

function gamedraw()
  local lv = levels[level+1]
  local ox = lv.ox * 16
  local oy = lv.oy * 16
  
  cls(lv.darkreset and 0 or 1)
  map(ox, oy, 0, 0, 16, 16, 0x80)
  
  for thing in all(things) do
    spr(thing.sp, thing.x, thing.y, 1, 1, thing.flipped)
  end
  
  if fade > 0 then
    local t = fade ^ fadecurve
    if fadein then
      rectfill(0, 128 - (t * 128), 128, 128, fadecol)
    else
      rectfill(0, 0, 128, 128 - (t * 128), fadecol)
    end
  end
end
-->8
-- finale state

function finaleinit()
end

function finaleupdate()
  if btnp(4) then
    changestate(states.title)
  end
end

function finaledraw()
  cls(2)
  print("finale")
end
__gfx__
00000000000070006666666699999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077706cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700000075706cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000000777776cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000007777006cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700077770706cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000770070006cccccc69aaaaaa9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000077006666666699999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505005000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
550505050a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5050505500a00a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5505050500aaaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5050505500a00a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
500505050a0000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
55555555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80808008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80808088000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80808088000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
80080808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000818100000000000000000000000081000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000003000002000000000000000000000000020000000000000000000000000000002000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000020000000000000000000000000000002000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000003000011000200000000000000110000020000000000000000000000000000002000001100000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000003000000000000000000000000000000020000010000000000000000000100002000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020002000202020000000000000002020200020002020200000000000000101000001000001010000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000003000000000000000000000000000000200000
0000000000000000000000001100000000000000000000000000000011000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000010000000000000000000000000000000100000000000000000000000000000000000000000202020202000011000011000000000002000000000000000000000000000000000000000000001100000000000000000000000000000000000002000000000000000000000000000200000000000000000000000000000010
0000020202000003030000020202000000001010100000202000001010100000000100000000000000000000020000000000000000000000020000000000010000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000020000000000000000000000000000001000
0000020202000000000000020202000000001010100000000000001010100000000202000003030000000000000202000002020000000000000303000002020000020200002020000020200000020200000000000000000000000000000000000000000202030300000003030202000000000000002020000000202000100000
0000000000000000000000000000000000000000000000000000000000000000000202000000000000000000000202000002020000000000000000000002020000020200000000000000000000020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
